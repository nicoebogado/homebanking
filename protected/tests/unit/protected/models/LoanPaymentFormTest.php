<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-09-26 at 18:05:50.
 */
class LoanPaymentFormTest extends PHPUnit_Framework_TestCase {

    /**
     * @var LoanPaymentForm
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new LoanPaymentForm;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers LoanPaymentForm::rules
     * @todo   Implement testRules().
     */
    public function testRules() {
        // Remove the following lines when you implement this test.
         $this->assertInternalType('array', $this->object->rules());
                $this->assertEquals(array(
                array('debitAccount, feesAmount', 'required'),
                array('feesAmount', 'numerical', 'integerOnly'=>true),

                array('loanNumber, confirm', 'safe'),
                array('loanNumber, confirm', 'required', 'on'=>'confirm'),
            ), $this->object->rules());
    }

    /**
     * @covers LoanPaymentForm::attributeLabels
     * @todo   Implement testAttributeLabels().
     */
    public function testAttributeLabels() {
        // Remove the following lines when you implement this test.
        $this->assertInternalType('array', $this->object->attributeLabels());
                $this->assertEquals(array(
                'debitAccount'=>Yii::t('app', 'Cuenta dÃ©bito'),
                'feesAmount'=>Yii::t('app', 'Cantidad de cuotas'),
            ), $this->object->attributeLabels());
    }

    /**
     * @covers LoanPaymentForm::formConfig
     * @todo   Implement testFormConfig().
     */
    public function testFormConfig() {
        $this->assertInternalType('array', $this->object->formConfig($debitAccountOptions='1'));
        $this->assertEquals(array(
        'showErrorSummary'=>false,
			'elements'=>array(
				'debitAccount'=>array(
					'type'=>'dropdownlist',
					'items'=>'A',
					'empty'=>'',
				),
				'feesAmount'=>array(
					'type'=>'number',
				),
				
			),
			'buttons'=>array(
				'submit'=>array(
					'buttonType'=>'submit',
					'context'=>'primary',
					'label'=>'Verificar Pago',
				),
				'cancel'=>array(
					'buttonType'=>'link',
					'context'=>'danger',
					'label'=>'Cancelar',
					'url'=>array('/site/index'),
				),
			),
    ), $this->object->formConfig($debitAccountOptions='A'));
    }

    /**
     * @covers LoanPaymentForm::hiddenFormConfig
     * @todo   Implement testHiddenFormConfig().
     */
    public function testHiddenFormConfig() {
        // Remove the following lines when you implement this test.
        $this->assertInternalType('array', $this->object->hiddenFormConfig());
                $this->assertEquals(array(
                'elements'=>array(
				'debitAccount'=>array(
					'type'=>'hidden',
				),
				'loanNumber'=>array(
					'type'=>'hidden',
				),
				'feesAmount'=>array(
					'type'=>'hidden',
				),
				'confirm'=>array(
					'type'=>'hidden',
				),
				
			),
			'buttons'=>array(
				'submit'=>array(
					'buttonType'=>'submit',
					'context'=>'primary',
					'label'=>'Confirmar Pago',
				),
				'cancel'=>array(
					'buttonType'=>'link',
					'context'=>'danger',
					'label'=>'Cancelar',
					'url'=>array('/site/index'),
				),
			),
            ), $this->object->hiddenFormConfig());
    }

}
